{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 name: Genevieve Sanders\
uni: gs2908\
\
NOTE: test.txt is integrated into information below + supplemented with pictures in subfolder implementation_pics.\
\
DESCRIPTION:\
The following application (consisting of main ChatApp.py, client.py, and server.py) implements a simple UDP chatroom.\
\
To initialize the underlying server, one uses command $ python3 ChatApp.py -s [
\f1\i port number
\f0\i0 ]. For example, in the example photo server.png, the  port number chosen was 1024. If given a viable port number, the script will print a statement indicating the server is being initialize; otherwise, it will ask for a viable port number.\
\
Now, let\'92s create 3 users - @gs2908, @milliethebear, and @funuser3. If we create users in this order, we will be notified that the client table is updated with each subsequent registered user, and each user will receive an opening message of \
	\'93>>> [Welcome @[
\f1\i USER
\f0\i0 ], You are registered.]\'94 \
At this point, we see user @gs2908 call function\
	\'93>>> peers\'94\
which prints a local dictionary record of all known clients with a list of their IP, port number, and online status (as a boolean.) (This trajectory and that of the following paragraph can be seen in client-gs2908.png.)\
\
Next, user @gs2908 sends herself a message saying \'93hey me!\'94 She receives this message (with preceding code PM to indicate it is a private message) as well as a notification that her self-message was successfully received. She then uses the command structure\
	 \'93>>> send [
\f1\i USER
\f0\i0 ] [
\f1\i message
\f0\i0 ]\'94 \
to ask @milliethebear \'93what's it like to always be dancing?\'94 She is notified that this message was received and gets a PM message back from Millie before then receiving a Channel Message from @funuser3. (The other side of all of these interactions can be seen in the other client-[
\f1\i USERNAME
\f0\i0 ] photos.)\
\
@gs2908 uses command \
	\'93>>>send_all [message]\'94 \
to send a group chat message before logging off temporarily using \
	\'93>>>dereg [
\f1\i USERNAME
\f0\i0 ]\'94. \
She receives a notification she is offline, and when she logs back on using \
	\'93>>>reg [
\f1\i USERNAME
\f0\i0 ]\'94\
she is notified that she has some unread messages - two channel messages from @milliethebear and @funuser3, and one PM from @funuser3 (all with time stamps.) Such offline messages are stored in username-labeled text files created with new user registration. @gs2908 sends back a group message (which is notified to be successfully received by the Server) and receives one more group message before using Command+C to initiate a error-handled silent leave as seen below.\
	\'93^C >>> [Keyboard Interrupt detected; silent leave initiated]\'94\
	\'93Client @gs2908 has exited.\'94\
\
\
IMPLEMENTED SERVER/CLIENT INTIALIZATION COMMANDS:\
	python3 ChatApp.py -s (port number)\
	OR\
	python3 ChatApp.py -c (name, server_ip, server_port, client_port)\
\
IMPLEMENTED CLIENT COMMANDS:\
	dereg (username)\
	reg (username)\
	send_all (message)\
	send (target_user) (message)\
	peers\
		*** bonus function to see local client table!}